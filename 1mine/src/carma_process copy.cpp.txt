#include <carma>
#include <armadillo>
#include <pybind11/pybind11.h>
#include <pybind11/numpy.h>
//#include <functionc.hpp>



/*
py::array_t<double> manual_example(py::array_t<double> & arr) {
    // convert to armadillo matrix without copying.
    // Note the size of the matrix cannot be changed when borrowing
    arma::Mat<double> mat = carma::arr_to_mat<double>(arr);

    // normally you do something useful here ...
    arma::Mat<double> result = arma::Mat<double>(arr.shape(0), arr.shape(1), arma::fill::randu);

    // convert to Numpy array and copy out
    return carma::mat_to_arr(result, true);
}
*/


/*
arma::field<cube> middle = onepl_lsrm_cont_missing(arma::mat data,
        const int ndim,
        const int niter,
        const int nburn,
        const int nthin,
        const int nprint,
        
        const double jump_beta,
        const double jump_theta,
        const double jump_gamma,
        const double jump_z,
        const double jump_w,
        
        const double pr_mean_beta,
        const double pr_sd_beta,
        const double pr_a_th_sigma,
        const double pr_b_th_sigma,
        const double pr_mean_theta,
        const double pr_a_sigma,
        const double pr_b_sigma,
        const double pr_mean_gamma,
        const double pr_sd_gamma,
        const double missing
);
*/

arma::field<cube> middle;



py::array_t<double> manual_example(py::array_t<double> &arr) 
{
    // convert to armadillo matrix without copying.
    // Note the size of the matrix cannot be changed when borrowing
    arma::Mat<double> mat = carma::arr_to_mat<double>(arr);

    // normally you do something useful here ...
    arma::Mat<double> result = arma::Mat<double>(arr.shape(0), arr.shape(1), arma::fill::randu);

    // convert to Numpy array and copy out
    return carma::mat_to_arr(result, true);
}






















